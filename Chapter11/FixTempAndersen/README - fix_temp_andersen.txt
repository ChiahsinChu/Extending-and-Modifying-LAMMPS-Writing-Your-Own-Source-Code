fix_temp_andersen.cpp
fix_temp_andersen.h

-----------------
FIX TEMP ANDERSEN
-----------------
This fix appies the Andersen thermostat to point particles. 
The user can define the following:
i)  Thermostat frequency
ii) Random number generation seed
iii)Standard deviation (sigma) of MB velocity distribution, i.e. sigma = SQRT(kB*Temp/m)	 

-------
SYNTAX:
-------
fix ID GROUP-ID temp/andersen  FREQUENCY   SEED   SIGMA

	- FREQUENCY: number of timesteps after which the velocity is adjusted
	- SEED: integer seed to generate randmom numbers
	- SIGMA: standard deviation of the Maxwell-Boltzmann distribution (=sqrt(kB*T/m))

------------------------
RANDOM NUMBER GENERATION
------------------------
The random numbers and velocities are generated by the Marsaglia random number generator in the following lines of codes:

  ------------------------------------------------------

  // SM
  andFreq = force->inumeric(FLERR,arg[3]);
  seedMB = force->inumeric(FLERR,arg[4]);
  sigmaMB = force->numeric(FLERR,arg[5]);

  // SM
  // initialize Marsaglia RNG with processor-unique seed
  random = new RanMars(lmp,seedMB + comm->me);
  
  ------------------------------------------------------
  
  // SM: 
  // 1. adjust velocities if currentTime % andFreq == 0
  // 2. generate vx,vy,vz from random->gaussian() and scale by sigmaMB

  int currentTime = update->ntimestep;	// SM 
  if ( (currentTime > 0) && (currentTime % andFreq == 0) ) {
    for (int i = 0; i < nlocal; i++) {	
      if (mask[i] & groupbit) {
		// SM: assign vx,vy,vz
		v[i][0] = sigmaMB * random->gaussian();
		v[i][1] = sigmaMB * random->gaussian();
		v[i][2] = sigmaMB * random->gaussian();
      }       
    }	
  } 
  